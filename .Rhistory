a <- c("hola",2)
a
a[1]
a[2]
x <- seq(0,9,10)
x
x <- seq(0,9,0.1)
x
length(x)
ls()
c.opt <- sqrt(2*exp(1)/pi)
lambda.opt <- 1
curve(c.opt * ddexp(x), xlim = c(-4, 4), lty = 2)
ls()
rm(list=ls())
ddexp <- function(x, lambda = 1){
# Densidad doble exponencial
lambda*exp(-lambda*abs(x))/2
}
curve(ddexp(x,1))
curve(-ddexp(x,1))
curve(ddexp(-x,1))
curve(ddexp(x,1))
curve(dnorm, add = TRUE)
curve(dnorm)
curve(dnorm(x,-2,2))
curve(dnorm(x),-2,2)
curve(ddexp(x),-2,2)
curve(dnorm(x),-2,2)
curve(ddexp(x),-2,2, add = TRUE)
c.opt <- sqrt(2*exp(1)/pi)
lambda.opt <- 1
curve(c.opt * ddexp(x), xlim = c(-4, 4), lty = 2)
curve(dnorm, add = TRUE)
c.opt <- 1 # sqrt(2*exp(1)/pi)
lambda.opt <- 1
curve(c.opt * ddexp(x), xlim = c(-4, 4), lty = 2)
curve(dnorm, add = TRUE)
optimize(f = function(x) dnorm(x)/ddexp(x), maximum = TRUE, interval = c(-0.5,0.5))
optimize(f = function(x) dnorm(x)/ddexp(x), maximum = TRUE, interval = c(0, 2))
res <- optimize(f = function(x) dnorm(x)/ddexp(x), maximum = TRUE, interval = c(-2, 2))
res$maximum
sqrt(2*exp(1)/pi)
res$objective
rdexp(1)
rdexp <- function(lambda = 1){
# Simulación por inversión
# Doble exponencial
U <- runif(1)
if (U<0.5) {
return(log(2*U)/lambda)
} else {
return(-log(2*(1-U))/lambda)
}
}
rdexp(1)
rdexp(1)
rdexp(1)
# Implementación del algoritmo
# ngen <- 0 # variable global
rnormAR <- function() {
# Simulación por aceptación-rechazo
# Normal estandar a partir de doble exponencial
c.opt <- sqrt(2*exp(1)/pi)
while (TRUE) {
U <- runif(1)
X <- rdexp(1) # rdexpn(1, lambda.opt)
# ngen <<- ngen + 1 # Comentar esta línea para uso normal
# if (U*exp((X^2+1)*0.5-abs(X)) <= 1) return(X)
if (c.opt * U * ddexp(X, 1) <= dnorm(X)) return(X)
}
}
rnormARn <- function(n = 1000) {
# Simulación n valores N(0,1)
x <- numeric(n)
for(i in 1:n) x[i] <- rnormAR()
return(x)
}
rnormARn(5)
x <- rnormARn(1000)
hist(x, breaks = "FD", freq = FALSE, main = "")
curve(dnorm, add = TRUE)
vec <- c(rep(0,50),rep(1,50))
vec
mean(vec)
vec <- c(rep(0,20),rep(1,50))
mean(vec)
median(vec)
hist(vec)
set.seed(12)
sample(10,5)
runif(1)
runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
5*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
5*runif(1)
5*runif(1)
plot(cars)
plot(cars)
plot(cars)
x <- seq(0,10,0.1)
y <- x+2
plot(x,y,type="l")
help(ifelse)
ifelse(2>4,1,0)
ifelse(1:10>5,1,0)
paste("hola")
help(paste)
paste("hola","mundo")
paste("hola","mundo",sep="-")
paste(c("hola","mundo"),sep="-")
a <-  4*2
if(a>5){
b <-  a+2
}
b <-  a*2
c <-  b*2
c
x <- c(5,2,4,1,8)
y <- numeric(5)
for(i in 1:5){
if(i<3){
y[i] <- x[i]
}else{
y[i] <- i
}
}
y
x <- c(4, 5, 6, 2)
x>4
install.packages("openair")
library(openair)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Combine data into a data frame
data <- data.frame(obs, model1, model2)
# Create a Taylor diagram
TaylorDiagram(data, obs = "obs", mod = c("model1", "model2"),
xlim = c(3.5, 4.5), ylim = c(3.5, 4.5), rms.col = "darkgray")
install.packages("plotrix")
library(plotrix)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Plot the Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19, xlim=c(3.5, 4.5), ylim=c(3.5, 4.5))
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Plot the Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19, xlim=c(3.5, 4.5), ylim=c(3.5, 4.5))
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Calculate the standard deviation of the observed data
sd_obs <- sd(obs)
# Create the initial Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19)
# Add the second model to the diagram
taylor.diagram(obs, model2, add=TRUE, col="red", pch=19)
# Zoom in by setting the axis limits manually
plot(0, 0, type="n", xlim=c(3.5, 4.5), ylim=c(3.5, 4.5), xlab="Standard Deviation", ylab="Standard Deviation")
symbols(0, 0, circles=sd_obs, inches=FALSE, add=TRUE, fg="darkgray", lty=2)
# Re-plot the data points
points(sd(model1), sd(model1) * cor(obs, model1), col="blue", pch=19)
points(sd(model2), sd(model2) * cor(obs, model2), col="red", pch=19)
# Add correlation lines
segments(0, 0, sd(model1), sd(model1) * cor(obs, model1), col="blue", lty=2)
segments(0, 0, sd(model2), sd(model2) * cor(obs, model2), col="red", lty=2)
# Add legend
legend("topright", legend=c("Model 1", "Model 2"), col=c("blue", "red"), pch=19)
# Create the initial Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19)
# Add the second model to the diagram
taylor.diagram(obs, model2, add=TRUE, col="red", pch=19)
# Zoom in by setting the axis limits manually
plot(0, 0, type="n", xlim=c(3.5, 4.5), ylim=c(3.5, 4.5), xlab="Standard Deviation", ylab="Standard Deviation")
symbols(0, 0, circles=sd_obs, inches=FALSE, add=TRUE, fg="darkgray", lty=2)
# Re-plot the data points
points(sd(model1), sd(model1) * cor(obs, model1), col="blue", pch=19)
points(sd(model2), sd(model2) * cor(obs, model2), col="red", pch=19)
# Add correlation lines
segments(0, 0, sd(model1), sd(model1) * cor(obs, model1), col="blue", lty=2)
segments(0, 0, sd(model2), sd(model2) * cor(obs, model2), col="red", lty=2)
# Add legend
legend("topright", legend=c("Model 1", "Model 2"), col=c("blue", "red"), pch=19)
# Create the initial Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19)
# Add the second model to the diagram
taylor.diagram(obs, model2, add=TRUE, col="red", pch=19)
# Create the initial Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19)
# Add the second model to the diagram
taylor.diagram(obs, model2, add=TRUE, col="red", pch=19)
# Zoom in by setting the axis limits manually
plot(0, 0, type="n", xlim=c(0.2, 0.3), ylim=c(0.0, 0.1), xlab="Standard Deviation", ylab="Standard Deviation")
symbols(0, 0, circles=sd_obs, inches=FALSE, add=TRUE, fg="darkgray", lty=2)
# Re-plot the data points
points(sd(model1), sd(model1) * cor(obs, model1), col="blue", pch=19)
points(sd(model2), sd(model2) * cor(obs, model2), col="red", pch=19)
# Add correlation lines
segments(0, 0, sd(model1), sd(model1) * cor(obs, model1), col="blue", lty=2)
segments(0, 0, sd(model2), sd(model2) * cor(obs, model2), col="red", lty=2)
# Add legend
legend("topright", legend=c("Model 1", "Model 2"), col=c("blue", "red"), pch=19)
# Create the initial Taylor diagram
taylor.diagram(obs, model1, col="blue", pch=19)
# Add the second model to the diagram
taylor.diagram(obs, model2, add=TRUE, col="red", pch=19)
# Zoom in by setting the axis limits manually
plot(0, 0, type="n", xlim=c(3.5, 4.5), ylim=c(3.5, 4.5), xlab="Standard Deviation", ylab="Standard Deviation")
symbols(0, 0, circles=sd_obs, inches=FALSE, add=TRUE, fg="darkgray", lty=2)
# Re-plot the data points
points(sd(model1), sd(model1) * cor(obs, model1), col="blue", pch=19)
points(sd(model2), sd(model2) * cor(obs, model2), col="red", pch=19)
# Add correlation lines
segments(0, 0, sd(model1), sd(model1) * cor(obs, model1), col="blue", lty=2)
segments(0, 0, sd(model2), sd(model2) * cor(obs, model2), col="red", lty=2)
# Add legend
legend("topright", legend=c("Model 1", "Model 2"), col=c("blue", "red"), pch=19)
library(openair)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Combine data into a data frame
data <- data.frame(obs, model1, model2)
library(ggplot2)
library(openair)
# Create Taylor diagram
taylor_data <- TaylorDiagram(data, obs = "obs", mod = c("model1", "model2"), group = TRUE)
# Create Taylor diagram
taylor_data <- TaylorDiagram(data, obs = "obs", mod = c("model1", "model2"), group = TRUE)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Combine data into a data frame
data <- data.frame(obs, model1, model2)
library(openair)
# Create Taylor diagram
taylor_data <- TaylorDiagram(data, obs = "obs", mod = c("model1", "model2"))
library(plotrix)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Calculate statistics
sd_obs <- sd(obs)
sd_model1 <- sd(model1)
sd_model2 <- sd(model2)
cor_model1 <- cor(obs, model1)
cor_model2 <- cor(obs, model2)
# Create an empty plot with the desired limits
plot(0, 0, type = "n", xlim = c(3.5, 4.5), ylim = c(3.5, 4.5),
xlab = "Standard Deviation", ylab = "Correlation Coefficient", asp = 1)
# Add circles representing standard deviation of observations
symbols(0, 0, circles = sd_obs, inches = FALSE, add = TRUE, fg = "darkgray", lty = 2)
# Add points for the models
points(sd_model1, sd_model1 * cor_model1, col = "blue", pch = 19)
points(sd_model2, sd_model2 * cor_model2, col = "red", pch = 19)
# Add lines connecting the origin to the points
segments(0, 0, sd_model1, sd_model1 * cor_model1, col = "blue", lty = 2)
segments(0, 0, sd_model2, sd_model2 * cor_model2, col = "red", lty = 2)
# Add a legend
legend("topright", legend = c("Model 1", "Model 2"), col = c("blue", "red"), pch = 19)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Calculate statistics
sd_obs <- sd(obs)
sd_model1 <- sd(model1)
sd_model2 <- sd(model2)
cor_model1 <- cor(obs, model1)
cor_model2 <- cor(obs, model2)
# Print statistics to determine appropriate zoom levels
print(paste("SD obs:", sd_obs))
print(paste("SD model1:", sd_model1, "Correlation:", cor_model1))
print(paste("SD model2:", sd_model2, "Correlation:", cor_model2))
# Adjust the zoom limits based on calculated statistics
xlim_vals <- range(c(sd_obs, sd_model1, sd_model2)) * c(0.9, 1.1)
ylim_vals <- range(c(sd_model1 * cor_model1, sd_model2 * cor_model2)) * c(0.9, 1.1)
# Create an empty plot with the desired limits
plot(0, 0, type = "n", xlim = xlim_vals, ylim = ylim_vals,
xlab = "Standard Deviation", ylab = "Correlation Coefficient", asp = 1)
# Add circles representing standard deviation of observations
symbols(0, 0, circles = sd_obs, inches = FALSE, add = TRUE, fg = "darkgray", lty = 2)
# Add points for the models
points(sd_model1, sd_model1 * cor_model1, col = "blue", pch = 19)
points(sd_model2, sd_model2 * cor_model2, col = "red", pch = 19)
# Add lines connecting the origin to the points
segments(0, 0, sd_model1, sd_model1 * cor_model1, col = "blue", lty = 2)
segments(0, 0, sd_model2, sd_model2 * cor_model2, col = "red", lty = 2)
# Add a legend
legend("topright", legend = c("Model 1", "Model 2"), col = c("blue", "red"), pch = 19)
a <- c(4,5,6,3,3,4)
a
matrix(a,nrow=2)
matrix(a,ncol = 2)
a<- matrix(a,ncol = 2)
a
sum(a)
help("sum")
a[:,1]
a[,1]
a[,1:2]
a[1,1:]
a[1,1]
a[1,:]
a[1,]
a[2,]
a[,2]
# Install and load required packages
library(plotrix)
# Sample data
obs <- c(3.6, 4.2, 3.9, 4.1, 3.7)
model1 <- c(3.4, 4.1, 3.8, 4.0, 3.6)
model2 <- c(3.5, 4.3, 3.9, 4.2, 3.8)
# Calculate statistics
sd_obs <- sd(obs)
sd_model1 <- sd(model1)
sd_model2 <- sd(model2)
cor_model1 <- cor(obs, model1)
cor_model2 <- cor(obs, model2)
# Print statistics to determine appropriate zoom levels
print(paste("SD obs:", sd_obs))
print(paste("SD model1:", sd_model1, "Correlation:", cor_model1))
print(paste("SD model2:", sd_model2, "Correlation:", cor_model2))
# Adjust the zoom limits based on calculated statistics
xlim_vals <- range(c(sd_obs, sd_model1, sd_model2)) * c(0.9, 1.1)
ylim_vals <- range(c(sd_model1 * cor_model1, sd_model2 * cor_model2)) * c(0.9, 1.1)
# Create an empty plot with the desired limits
plot(0, 0, type = "n", xlim = xlim_vals, ylim = ylim_vals,
xlab = "Standard Deviation", ylab = "Correlation Coefficient", asp = 1)
# Add circles representing standard deviation of observations
symbols(0, 0, circles = sd_obs, inches = FALSE, add = TRUE, fg = "darkgray", lty = 2)
# Add points for the models
points(sd_model1, sd_model1 * cor_model1, col = "blue", pch = 19)
points(sd_model2, sd_model2 * cor_model2, col = "red", pch = 19)
# Add lines connecting the origin to the points
segments(0, 0, sd_model1, sd_model1 * cor_model1, col = "blue", lty = 2)
segments(0, 0, sd_model2, sd_model2 * cor_model2, col = "red", lty = 2)
# Add a legend
legend("topright", legend = c("Model 1", "Model 2"), col = c("blue", "red"), pch = 19)
# Cargar el conjunto de datos PlantGrowth original
data("PlantGrowth")
# Crear una copia con datos faltantes
set.seed(123) # para reproducibilidad
PlantGrowth_na <- PlantGrowth
num_na <- 5   # número de valores a reemplazar con NA
na_indices <- sample(1:nrow(PlantGrowth_na), num_na)
PlantGrowth_na$weight[na_indices] <- NA
# Funciones de Estadísticas Descriptivas para PlantGrowth_na por grupo
# 1. Media del Peso por Grupo (ignorar NA)
calcular_media_por_grupo <- function() {
mean_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, mean, na.rm = TRUE)
return(mean_vals)
}
# 2. Mediana del Peso por Grupo (ignorar NA)
calcular_mediana_por_grupo <- function() {
median_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, median, na.rm = TRUE)
return(median_vals)
}
# 3. Varianza del Peso por Grupo (ignorar NA)
calcular_varianza_por_grupo <- function() {
var_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, var, na.rm = TRUE)
return(var_vals)
}
# 4. Desviación Estándar del Peso por Grupo (ignorar NA)
calcular_desviacion_por_grupo <- function() {
sd_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, sd, na.rm = TRUE)
return(sd_vals)
}
# 5. Rango Intercuartil (IQR) del Peso por Grupo (ignorar NA)
calcular_rango_intercuartil_por_grupo <- function() {
iqr_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, IQR, na.rm = TRUE)
return(iqr_vals)
}
# 6. Percentil 90 del Peso por Grupo (ignorar NA)
calcular_percentil_90_por_grupo <- function() {
perc_90_vals <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, quantile, 0.9, na.rm = FALSE)
return(perc_90_vals)
}
# Funciones de Visualización para PlantGrowth_na por grupo
# 7. Histograma del Peso por Grupo (ignorar NA) - Devuelve conteos de frecuencias por grupo
crear_histograma_por_grupo <- function() {
grupos <- unique(PlantGrowth_na$group)
resultados <- list()
for (grupo in grupos) {
hist_data <- hist(PlantGrowth_na$weight[PlantGrowth_na$group == grupo],
plot = TRUE, main = "Histograma", xlab = grupo)
resultados[[grupo]] <- hist_data$counts # conteos de frecuencias en cada intervalo
}
return(resultados)
}
# 8. Diagrama de Caja del Peso por Grupo (ignorar NA) - Devuelve estadísticas del boxplot por grupo
crear_boxplot_por_grupo <- function() {
box_data <- boxplot(weight ~ group, data = PlantGrowth_na, plot = FALSE)
return(box_data$stats) # retorna estadísticas de los boxplots (min, Q1, mediana, Q3, max)
}
# 9. Diagrama de Dispersión de Peso por Grupo (con ruido aleatorio, ignorar NA) - Devuelve número de puntos por grupo
crear_dispersion_por_grupo <- function() {
grupos <- unique(PlantGrowth_na$group)
puntos_por_grupo <- sapply(grupos, function(grupo) {
sum(!is.na(PlantGrowth_na$weight[PlantGrowth_na$group == grupo])) # cuenta puntos no NA
})
return(puntos_por_grupo)
}
# 10. Gráfico de Barras de la Media del Peso por Grupo (ignorar NA) - Devuelve medias por grupo
crear_grafico_barras_por_grupo <- function() {
medias_por_grupo <- tapply(PlantGrowth_na$weight, PlantGrowth_na$group, mean, na.rm = TRUE)
barplot(medias_por_grupo, main = "Media del Peso por Grupo con NA", col = "orange",
xlab = "Grupo", ylab = "Peso Medio")
return(medias_por_grupo)
}
crear_boxplot_por_grupo()
crear_boxplot_por_grupo <- function() {
box_data <- boxplot(weight ~ group, data = PlantGrowth_na, plot = TRUE)
return(box_data$stats) # retorna estadísticas de los boxplots (min, Q1, mediana, Q3, max)
}
crear_boxplot_por_grupo()
resultado <- 10*crear_boxplot_por_grupo()
resultado
round(unname(resultado[1,2]))
crear_dispersion_por_grupo()
crear_dispersion_por_grupo()
resultado <- crear_dispersion_por_grupo()
round(unname(resultado[3]))
crear_grafico_barras_por_grupo()
resultado <- crear_grafico_barras_por_grupo()
round(unname(resultado[1]))
install.packages('recipes', dependencies=TRUE)
install.packages("caret")
clinica_data <- read_excel("data/ClinicaGliomasMayo2025.xlsx")
library(readxl)
clinica_data <- read_excel("data/ClinicaGliomasMayo2025.xlsx")
setwd("~/mygits/glioma")
library(caret)
install.packages('recipes')
install.packages('recipes', dependencies=TRUE)
